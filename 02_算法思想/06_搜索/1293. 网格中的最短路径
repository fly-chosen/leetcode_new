#### [695. 岛屿的最大面积](https://leetcode-cn.com/problems/max-area-of-island/)
* 给定一个包含了一些 0 和 1 的非空二维数组 grid 。
> 一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。
找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)

 

* 示例 1:
```
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
对于上面这个给定矩阵应返回 6。注意答案不应该是 11 ，
因为岛屿只能包含水平或垂直的四个方向的 1 。
```
* 示例 2:
```
[[0,0,0,0,0,0,0,0]]
对于上面这个给定的矩阵, 返回 0。
```

### 第一种解法：

```java
class Solution {
        public int maxAreaOfIsland(int[][] grid) {
            //先判断边界值
            int res =0;
            for(int i = 0;i<grid.length;i++){
                for (int j=0;j <grid[i].length;j++){
                    if(grid[i][j]==1){
                        res=Math.max(res,dfs(i,j,grid));
                    }
                }
            }
            return res;
        }
        //使用dfs深度遍历的+递归的方法进行解决
        private int dfs(int i,int j,int[][] grid){
            //if (i<0 || j < 0 || i>=grid.length||j>grid[i].length || grid[i][j] ==0){
            //    return 0;  //判断边界
            //}
            if (i < 0 || j < 0 || i >= grid.length || j >= grid[i].length || grid[i][j] == 0) {
                return 0;
            }
            grid[i][j]=0; //沉船思想，将上下左右遍历到的都进行标记为0，避免在深度搜索中进行重复遍历
            int num =1;
            num += dfs(i+1,j,grid);  //右
            num += dfs(i-1,j,grid);  //左
            num += dfs(i,j+1,grid);  //上
            num += dfs(i,j-1,grid);  //下
            return num;
        }
    }
```
