* 在歌曲列表中，第 i 首歌曲的持续时间为 time[i] 秒。
> 返回其总持续时间（以秒为单位）可被 60 整除的歌曲对的数量。形式上，我们希望索引的数字  i < j 且有 (time[i] + time[j]) % 60 == 0。

 * 示例 1：

```
输入：[30,20,150,100,40]
输出：3
解释：这三对的总持续时间可被 60 整数：
(time[0] = 30, time[2] = 150): 总持续时间 180
(time[1] = 20, time[3] = 100): 总持续时间 120
(time[1] = 20, time[4] = 40): 总持续时间 60
```
* 示例 2：

```
输入：[60,60,60]
输出：3
解释：所有三对的总持续时间都是 120，可以被 60 整数。
```


### 第一种解法
暴力双层循环解法
```java
class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        //使用双循环进行暴力处理
        int res =0;
        for (int i =0;i<time.length;i++){
            for(int j=i+1;j<time.length;j++){  //已知i<j
                if((time[i] + time[j])%60 == 0){
                    res++;
                }
            }  
        }return res;
    }
}
```
* 结果：可以通过33/34个测试用例。时间超出限制，所以需要进行优化

### 第二种解法：
* 这个题跟两数之和非常像，只不过k=60，不过要记得把数组中的每个元素对60取余数，并且对可以被60整除的数特殊处理一下即可，因为题中限制了i<j，所以map的值作为统计该余数出现在当前元素之前的次数即可。

```java
class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        for (int elem : time) {
           if (map.containsKey(elem % 60))
              count += map.get(elem % 60);
           map.put((60 - elem % 60) % 60, map.getOrDefault((60 - elem % 60) % 60, 0) + 1);
    }
    return count;
}
}
```

### 第三种解法：
* 取模运算

```java
class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        int count = 0;
        int[] index = new int[60];
        for (int n : time) {
            // 最后还要取模60，是因为(60 - n % 60)的值有可能等于60，而对于我们声明的数组来说，60已经越界了
            count += index[(60 - n % 60) % 60];
            index[n % 60]++;
        }
        return count;
    }
}
```
